from flask import Flask
from dotenv import load_dotenv
import os

# 1. N·∫°p bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# 2. Kh·ªüi t·∫°o Flask app
app = Flask(__name__)

# 3. C·∫•u h√¨nh app t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
app.config['SQLALCHEMY_DATABASE_URI'] = (
    f"postgresql://{os.getenv('DB_USER')}:{os.getenv('DB_PASSWORD')}"
    f"@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB_NAME')}"
)
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = os.getenv("JWT_SECRET_KEY", "dev-jwt-secret")

# 4. Kh·ªüi t·∫°o c√°c extension (db, bcrypt, jwt, migrate)
from extensions import db, bcrypt, jwt
from flask_migrate import Migrate

db.init_app(app)
bcrypt.init_app(app)
jwt.init_app(app)
migrate = Migrate(app, db)

# 5. Import models ƒë·ªÉ migrate nh·∫≠n di·ªán c√°c b·∫£ng
import models

# 6. ƒêƒÉng k√Ω blueprint ch√≠nh (api) - m·ªçi route ƒë·ªÅu n·∫±m d∆∞·ªõi /api
from routes import api as api_bp
app.register_blueprint(api_bp, url_prefix="/api")

# 7. Route test ƒë∆°n gi·∫£n
@app.route("/")
def home():
    return "Flask app ƒëang ch·∫°y ngon l√†nh üöÄ"

@app.route("/home")
def trang_chu():
    return "Trang ch·ªß"

# 8. Ch·∫°y app
if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=9000)
